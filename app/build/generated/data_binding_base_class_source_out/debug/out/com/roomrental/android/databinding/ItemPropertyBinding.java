// Generated by view binder compiler. Do not edit!
package com.roomrental.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.roomrental.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPropertyBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final Chip chipAvailable;

  @NonNull
  public final Chip chipPropertyType;

  @NonNull
  public final ImageView ivProperty;

  @NonNull
  public final LinearLayout layoutDetails;

  @NonNull
  public final TextView tvAddress;

  @NonNull
  public final TextView tvArea;

  @NonNull
  public final TextView tvBathrooms;

  @NonNull
  public final TextView tvBedrooms;

  @NonNull
  public final TextView tvPrice;

  @NonNull
  public final TextView tvTitle;

  private ItemPropertyBinding(@NonNull MaterialCardView rootView, @NonNull Chip chipAvailable,
      @NonNull Chip chipPropertyType, @NonNull ImageView ivProperty,
      @NonNull LinearLayout layoutDetails, @NonNull TextView tvAddress, @NonNull TextView tvArea,
      @NonNull TextView tvBathrooms, @NonNull TextView tvBedrooms, @NonNull TextView tvPrice,
      @NonNull TextView tvTitle) {
    this.rootView = rootView;
    this.chipAvailable = chipAvailable;
    this.chipPropertyType = chipPropertyType;
    this.ivProperty = ivProperty;
    this.layoutDetails = layoutDetails;
    this.tvAddress = tvAddress;
    this.tvArea = tvArea;
    this.tvBathrooms = tvBathrooms;
    this.tvBedrooms = tvBedrooms;
    this.tvPrice = tvPrice;
    this.tvTitle = tvTitle;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemPropertyBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemPropertyBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_property, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemPropertyBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chipAvailable;
      Chip chipAvailable = ViewBindings.findChildViewById(rootView, id);
      if (chipAvailable == null) {
        break missingId;
      }

      id = R.id.chipPropertyType;
      Chip chipPropertyType = ViewBindings.findChildViewById(rootView, id);
      if (chipPropertyType == null) {
        break missingId;
      }

      id = R.id.ivProperty;
      ImageView ivProperty = ViewBindings.findChildViewById(rootView, id);
      if (ivProperty == null) {
        break missingId;
      }

      id = R.id.layoutDetails;
      LinearLayout layoutDetails = ViewBindings.findChildViewById(rootView, id);
      if (layoutDetails == null) {
        break missingId;
      }

      id = R.id.tvAddress;
      TextView tvAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvAddress == null) {
        break missingId;
      }

      id = R.id.tvArea;
      TextView tvArea = ViewBindings.findChildViewById(rootView, id);
      if (tvArea == null) {
        break missingId;
      }

      id = R.id.tvBathrooms;
      TextView tvBathrooms = ViewBindings.findChildViewById(rootView, id);
      if (tvBathrooms == null) {
        break missingId;
      }

      id = R.id.tvBedrooms;
      TextView tvBedrooms = ViewBindings.findChildViewById(rootView, id);
      if (tvBedrooms == null) {
        break missingId;
      }

      id = R.id.tvPrice;
      TextView tvPrice = ViewBindings.findChildViewById(rootView, id);
      if (tvPrice == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      return new ItemPropertyBinding((MaterialCardView) rootView, chipAvailable, chipPropertyType,
          ivProperty, layoutDetails, tvAddress, tvArea, tvBathrooms, tvBedrooms, tvPrice, tvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
